import { ObservableMap } from 'mobx';
import React from 'react';
import { ScreenComponentProps } from '../ScreenComponentProps';
export interface Screen {
    id: string;
    path: string;
    Component: React.FC<{
        screenInstanceId: string;
        as: string;
    } & ScreenComponentProps>;
}
export interface ScreenInstance {
    id: string;
    screenId: string;
    nestedRouteCount: number;
    present: boolean;
    as: string;
}
export interface ScreenInstanceOption {
    navbar: NavbarOptions;
}
export interface NavbarOptions {
    visible: boolean;
    title: React.ReactNode | null;
    appendLeft: React.ReactNode | null;
    appendRight: React.ReactNode | null;
    closeButtonLocation: 'left' | 'right';
    customBackButton: React.ReactNode | null;
    customCloseButton: React.ReactNode | null;
}
export declare type ScreenInstancePromise = (data: any | null) => void;
export interface ScreenEdge {
    startTime: number | null;
    startX: number | null;
}
declare const store: {
    screens: ObservableMap<string, Screen>;
    screenInstances: ScreenInstance[];
    screenInstancePointer: number;
    screenInstanceOptions: ObservableMap<string, ScreenInstanceOption>;
    screenInstancePromises: ObservableMap<string, ScreenInstancePromise>;
    screenEdge: ScreenEdge;
};
export declare const setScreenInstanceIn: (pointer: number, setter: (screenInstance: ScreenInstance) => ScreenInstance) => void;
export declare const addScreenInstanceAfter: (pointer: number, { screenId, screenInstanceId, present, as, }: {
    screenId: string;
    screenInstanceId: string;
    present: boolean;
    as: string;
}) => void;
export declare const increaseScreenInstancePointer: () => void;
export declare const setScreenInstancePointer: (pointer: number) => void;
export declare const setScreenEdge: (screenEdge: ScreenEdge) => void;
export default store;
